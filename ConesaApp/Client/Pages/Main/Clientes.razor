@using Blazored.Modal;
@using ConesaApp.Client.Pages.Formularios;
@using ConesaApp.Client.Pages.Services
@using ConesaApp.Database.Data.Entities
@inject Blazored.Modal.Services.IModalService ModalService
@inject IHttpService http
@page "/Inicio/Clientes"

<div class="mainContainer">
    <table class="table">
        <tr>
            <th>Nombre</th>
            <th>Teléfono</th>
            <th>Patente</th>
            <th>Tipo de seguro</th>
            <th></th>
            <th>Estado</th>
            <th>Actualizado</th>
        </tr>
        @foreach (Vehiculo v in vehiculos)
        {
            <tr>
                <td>@v.Cliente.Nombre @v.Cliente.Apellido</td>
                <td>@v.Cliente.Telefono</td>
                <td>@v.Patente</td>
                <td>@v.Poliza.Cobertura.Tipo</td>
                <button class="btnMostrar" @onclick="MostrarDetalles">Mostrar</button>
                @if (v.Poliza.FinVigencia < DateTime.Today)
                {
                    <td>Vencido</td>
                }
                else
                {
                    <td>Activo</td>
                }
                @if (v.Poliza.Actualizado)
                {
                    <td>
                        <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" fill="#1B8235" class="bi bi-check2-circle" viewBox="0 0 16 16">
                            <path d="M2.5 8a5.5 5.5 0 0 1 8.25-4.764.5.5 0 0 0 .5-.866A6.5 6.5 0 1 0 14.5 8a.5.5 0 0 0-1 0 5.5 5.5 0 1 1-11 0z" />
                            <path d="M15.354 3.354a.5.5 0 0 0-.708-.708L8 9.293 5.354 6.646a.5.5 0 1 0-.708.708l3 3a.5.5 0 0 0 .708 0l7-7z" />
                        </svg>
                    </td>
                }
                else
                {
                    <td>
                        <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" fill="#822F33" class="bi bi-x-circle" viewBox="0 0 16 16">
                            <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                            <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z" />
                        </svg>
                    </td>
                }
            </tr>
        }
    </table>
</div>

@code {
    [Parameter]
    public string Busqueda { get; set; }
    [Parameter]
    public bool CheckboxChecked { get; set; }
    [Parameter]
    public DateTime fechaDesde { get; set; }
    [Parameter]
    public DateTime fechaHasta { get; set; }
    [Parameter]
    public bool busquedaVencimiento { get; set; }
    Cliente clienteSeleccionado;


    List<Vehiculo> vehiculos = new List<Vehiculo>();
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await readVehiculos();
        // await readVehiculosActualizados();
    }
    private async Task readVehiculos()
    {
        var respuesta = await http.Get<List<Vehiculo>>($"/Vehiculos");
        if (!respuesta.Error)
        {
            vehiculos = respuesta.Respuesta;
        }
    }
    private async Task readVehiculosActualizados()
    {
        if (CheckboxChecked)
        {
            var respuestaActualizados = await http.Get<List<Vehiculo>>($"/Vehiculos/Actualizados");
            if (!respuestaActualizados.Error)
            {
                vehiculos = respuestaActualizados.Respuesta;
            }
        }
    }
    protected override async Task OnParametersSetAsync()
    {

        if (CheckboxChecked && String.IsNullOrEmpty(Busqueda))
        {
            var respuestaActualizados = await http.Get<List<Vehiculo>>($"/Vehiculos/Actualizados");
            if (!respuestaActualizados.Error)
            {
                vehiculos = respuestaActualizados.Respuesta;
            }
        }
        else if (CheckboxChecked && !(String.IsNullOrEmpty(Busqueda)))
        {
            var respuestaActualizados = await http.Get<List<Vehiculo>>($"/Vehiculos/Busqueda/Actualizados?query={Busqueda}");
            if (!respuestaActualizados.Error)
            {
                vehiculos = respuestaActualizados.Respuesta;
            }
        }
        else if (!CheckboxChecked && !(String.IsNullOrEmpty(Busqueda)))
        {
            var respuesta = await http.Get<List<Vehiculo>>($"/Vehiculos/Busqueda?query={Busqueda}");
            if (!respuesta.Error)
            {
                vehiculos = respuesta.Respuesta;
                foreach (Vehiculo vehiculo in vehiculos)
                {
                    Console.WriteLine(vehiculo);
                }
            }
        }
        else if (String.IsNullOrEmpty(Busqueda))
        {
            var respuesta = await http.Get<List<Vehiculo>>($"/Vehiculos");
            if (!respuesta.Error)
            {
                vehiculos = respuesta.Respuesta;
            }
        }
        if (busquedaVencimiento)
        {
            var respuesta = await http.Get<List<Vehiculo>>($"/Vehiculos/Vencimiento?fechaInicio={fechaDesde}&fechaFin={fechaHasta}");
            if (!respuesta.Error)
            {
                vehiculos = respuesta.Respuesta;
            }
        }

    }

    private async Task MostrarDetalles()
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(MostrarCliente.ClienteSeleccionado), clienteSeleccionado);

        var options = new ModalOptions()
            {
                DisableBackgroundCancel = false,
                HideCloseButton = false,
            };

        var modal = await ModalService.Show<MostrarCliente>("Detalles del Cliente", options);
        modal.WithParameters(parameters);
    }
}

