@using ConesaApp.Database.Data.Entities;
@using Blazored.Modal
@using ConesaApp.Client.Pages.Services
@inject Blazored.Modal.Services.IModalService ModalService
@inject IHttpService http

<h3>MostrarCliente</h3>

<div>
    @if (clienteSeleccionado != null)
    {
        <div class="datosPersonales">
            <h3>Datos Personales</h3>

            <p>Nombre: @clienteSeleccionado.Nombre Apellido: @clienteSeleccionado.Apellido</p>
            <p>Ciudad: @clienteSeleccionado.Ciudad </p>
            <p>Ciudad: @clienteSeleccionado.Direccion </p>
            <p>Ciudad: @clienteSeleccionado.Telefono </p>
            <p>Ciudad: @clienteSeleccionado.Mail </p>
        </div>

        <label for="inputVehiculos">Seleccione un vehículo:</label>
        <InputSelect id="inputVehiculos" @bind-Value="vehiculoSeleccionado" class="form-control">
            @foreach (var vehiculo in vehiculos)
            {
                <option value="@vehiculo.Patente">@vehiculo.Patente</option>
            }
        </InputSelect>

        @if (vehiculoSeleccionado != null)
        {
            var vehiculoElegido = vehiculos.FirstOrDefault(v => v.Patente == vehiculoSeleccionado.Patente);
            if (vehiculoElegido != null)
            {
                <div class="datosVehiculo">
                    <h3>Datos del vehículo seleccionado </h3>
                    <p>Patente: @vehiculoElegido.Patente</p>
                    <p>Modelo: @vehiculoElegido.Marca</p>
                    <p>Año: @vehiculoElegido.Año</p>
                    <button @onclick="() => MostrarDetallesVehiculo(vehiculoElegido.Patente)">Ver Detalles</button>
                </div>

                if (polizaDelVehiculo != null)
                {
                    <div class="datosPoliza">
                        <h3>Datos de la Póliza asociada al vehículo </h3>
                        <p>Número de Póliza: @polizaDelVehiculo.NroPoliza</p>
                        <p>Valor Asegurado: @polizaDelVehiculo.ValorAsegurado</p>
                        <p>Inicio vigencia: @polizaDelVehiculo.InicioVigencia</p>
                        <p>Fin vigencia: @polizaDelVehiculo.FinVigencia</p>
                        <p>Tipo de cobertura: @polizaDelVehiculo.Cobertura</p>
                        <p>Empresa: @polizaDelVehiculo.Empresa</p>
                        <p>Valor Cuota: @polizaDelVehiculo.ValorCuota</p>
                    </div>
                }
            }
        }
    }

</div>

<button onclick="CerrarFormulario">Cerrar</button>

@code {
    [CascadingParameter] public Blazored.Modal.Services.ModalService Modal { get; set; }
    [Parameter] public Cliente ClienteSeleccionado { get; set; }
    [Parameter] public Poliza polizaDelVehiculo { get; set; }

    Poliza poliza;
    List<Vehiculo> vehiculos;
    Cliente clienteSeleccionado;
    Vehiculo vehiculoSeleccionado;


    protected override async Task OnInitializedAsync()
    {
        if (ClienteSeleccionado != null)
        {
            clienteSeleccionado = ClienteSeleccionado;
            vehiculos = await ObtenerDetallesVehiculo(clienteSeleccionado.ClienteID);
        }
    }

    // void MostrarDetalles(Cliente cliente)
    // {
    //     clienteSeleccionado = cliente;
    //     var vehiculo = ObtenerDetallesVehiculo(clienteSeleccionado.ClienteID);
    //     poliza = null;
    // }

    async Task<List<Vehiculo>> ObtenerDetallesVehiculo(int clienteId)
    {
        var respuestaVehiculo = await http.Get<List<Vehiculo>>($"/Clientes/{clienteId}/Vehiculos");
        return respuestaVehiculo.Respuesta;
    }
 

    // public async Task<Poliza> ObtenerDetallesPoliza(string patente)
    // {
    //     var detallesVehiculo = ObtenerDetallesVehiculoPorPatente(patente);
    //     //controller
    //     var respuestaPoliza = await http.Get<Poliza>($"/Vehiculos/{patente}/DetallesPoliza");
    //     return respuestaPoliza.Respuesta;
    // }

    void MostrarDetallesVehiculo(string patente)
    {
        if (vehiculoSeleccionado != null)
        {
            var vehiculoElegido = vehiculos.FirstOrDefault(v => v.Patente == vehiculoSeleccionado.Patente);
            if (vehiculoElegido != null)
            {
                ObtenerDetallesVehiculoYPoliza(vehiculoElegido.Patente);
            }
        }
    }

    public async Task<Poliza> ObtenerDetallesVehiculoYPoliza(string patente)
    {
        var detallesVehiculo = ObtenerDetallesVehiculoPorPatente(patente);
        //controller
        var respuestaPoliza = await http.Get<Poliza>($"/Vehiculos/{patente}/DetallesPoliza");
        return respuestaPoliza.Respuesta;
    }

    public async Task<Vehiculo> ObtenerDetallesVehiculoPorPatente(string patente)
    {
        var respuestaVehiculo = await http.Get<Vehiculo>($"/Vehiculo/{patente}");
        return respuestaVehiculo.Respuesta;
    }

    void CerrarFormulario()
    {
        Modal.Close();
    }
} 
